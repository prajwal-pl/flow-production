/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/0ea3Rp8prBD
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "../ui/card";
import { Button } from "../ui/button";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "../ui/table";
import { Badge } from "../ui/badge";
import { ChartTooltipContent, ChartTooltip, ChartContainer } from "../ui/chart";
import { Pie, PieChart, CartesianGrid, XAxis, Line, LineChart } from "recharts";
import { AnalyticsPieChart } from "../ui/AnalyticsPieChart";

export function ProductDashboard() {
  const [selectedMetric, setSelectedMetric] = useState("sales");
  const salesData = [
    { label: "Apparel", value: 45 },
    { label: "Electronics", value: 25 },
    { label: "Home Goods", value: 15 },
    { label: "Accessories", value: 10 },
    { label: "Other", value: 5 },
  ];
  const revenueData = [
    { label: "Apparel", value: 55 },
    { label: "Electronics", value: 20 },
    { label: "Home Goods", value: 15 },
    { label: "Accessories", value: 8 },
    { label: "Other", value: 2 },
  ];
  const customerData = [
    { label: "New", value: 60 },
    { label: "Returning", value: 30 },
    { label: "VIP", value: 10 },
  ];
  const orders = [
    {
      id: "INV001",
      date: "2023-06-01",
      customer: "Liam Johnson",
      total: 250.0,
      status: "Paid",
    },
    {
      id: "INV002",
      date: "2023-06-15",
      customer: "Olivia Smith",
      total: 150.0,
      status: "Pending",
    },
    {
      id: "INV003",
      date: "2023-06-30",
      customer: "Noah Williams",
      total: 350.0,
      status: "Unpaid",
    },
    {
      id: "INV004",
      date: "2023-07-01",
      customer: "Emma Brown",
      total: 450.0,
      status: "Paid",
    },
    {
      id: "INV005",
      date: "2023-07-10",
      customer: "Liam Johnson",
      total: 550.0,
      status: "Paid",
    },
  ];
  const handleMetricChange = (metric: string) => {
    setSelectedMetric(metric);
  };
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4 md:p-6">
      <Card className="col-span-1 lg:col-span-2">
        <CardHeader className="flex items-center justify-between">
          <CardTitle>Key Metrics</CardTitle>
          <div className="flex items-center gap-2">
            <Button
              variant={selectedMetric === "sales" ? "secondary" : "outline"}
              onClick={() => handleMetricChange("sales")}
            >
              Sales
            </Button>
            <Button
              variant={selectedMetric === "revenue" ? "secondary" : "outline"}
              onClick={() => handleMetricChange("revenue")}
            >
              Revenue
            </Button>
            <Button
              variant={selectedMetric === "customers" ? "secondary" : "outline"}
              onClick={() => handleMetricChange("customers")}
            >
              Customers
            </Button>
          </div>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="flex flex-col items-center justify-center">
            {/* <PiechartcustomChart className="w-full aspect-square md:w-[500px] md:h-[500px]" /> */}
            <AnalyticsPieChart />
            <div className="mt-4 text-center">
              <h3 className="text-2xl font-bold">
                {selectedMetric === "sales"
                  ? "Total Sales"
                  : selectedMetric === "revenue"
                  ? "Total Revenue"
                  : "Total Customers"}
              </h3>
              <p className="text-muted-foreground">
                {selectedMetric === "sales"
                  ? "$125,000"
                  : selectedMetric === "revenue"
                  ? "$95,000"
                  : "5,000"}
              </p>
            </div>
          </div>
          <div className="grid gap-4">
            <Card>
              <CardHeader>
                <CardTitle>New Customers</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">+250</div>
                <p className="text-muted-foreground">+15% from last month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Average Order Value</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">$75</div>
                <p className="text-muted-foreground">+5% from last month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Conversion Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">3.2%</div>
                <p className="text-muted-foreground">+0.5% from last month</p>
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Recent Orders</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Order</TableHead>
                <TableHead>Date</TableHead>
                <TableHead>Customer</TableHead>
                <TableHead>Total</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {orders.map((order) => (
                <TableRow key={order.id}>
                  <TableCell className="font-medium">{order.id}</TableCell>
                  <TableCell>{order.date}</TableCell>
                  <TableCell>{order.customer}</TableCell>
                  <TableCell className="text-right">
                    ${order.total.toFixed(2)}
                  </TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        order.status === "Paid"
                          ? "secondary"
                          : order.status === "Pending"
                          ? "outline"
                          : "outline"
                      }
                    >
                      {order.status}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}

function LinechartChart(props: any) {
  return (
    <div {...props}>
      <ChartContainer
        config={{
          desktop: {
            label: "Desktop",
            color: "hsl(var(--chart-1))",
          },
        }}
      >
        <LineChart
          accessibilityLayer
          data={[
            { month: "January", desktop: 186 },
            { month: "February", desktop: 305 },
            { month: "March", desktop: 237 },
            { month: "April", desktop: 73 },
            { month: "May", desktop: 209 },
            { month: "June", desktop: 214 },
          ]}
          margin={{
            left: 12,
            right: 12,
          }}
        >
          <CartesianGrid vertical={false} />
          <XAxis
            dataKey="month"
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            tickFormatter={(value) => value.slice(0, 3)}
          />
          <ChartTooltip
            cursor={false}
            content={<ChartTooltipContent hideLabel />}
          />
          <Line
            dataKey="desktop"
            type="natural"
            stroke="var(--color-desktop)"
            strokeWidth={2}
            dot={false}
          />
        </LineChart>
      </ChartContainer>
    </div>
  );
}

function PiechartcustomChart(props: any) {
  return (
    <div {...props}>
      <ChartContainer
        config={{
          visitors: {
            label: "Visitors",
          },
          chrome: {
            label: "Chrome",
            color: "hsl(var(--chart-1))",
          },
          safari: {
            label: "Safari",
            color: "hsl(var(--chart-2))",
          },
          firefox: {
            label: "Firefox",
            color: "hsl(var(--chart-3))",
          },
          edge: {
            label: "Edge",
            color: "hsl(var(--chart-4))",
          },
          other: {
            label: "Other",
            color: "hsl(var(--chart-5))",
          },
        }}
      >
        <PieChart>
          <ChartTooltip
            cursor={false}
            content={<ChartTooltipContent hideLabel />}
          />
          <Pie
            data={[
              { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
              { browser: "safari", visitors: 200, fill: "var(--color-safari)" },
              {
                browser: "firefox",
                visitors: 187,
                fill: "var(--color-firefox)",
              },
              { browser: "edge", visitors: 173, fill: "var(--color-edge)" },
              { browser: "other", visitors: 90, fill: "var(--color-other)" },
            ]}
            dataKey="visitors"
            nameKey="browser"
          />
        </PieChart>
      </ChartContainer>
    </div>
  );
}
